{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = 'http://localhost:5000/api'; // Python Flask backend\nconst TIMEOUT = 30000; // 30 seconds timeout for ML predictions\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// ML Model Service\nclass MLModelService {\n  // Get model status and information\n  async getModelStatus() {\n    try {\n      const response = await apiClient.get('/models/status');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error fetching model status:', error);\n      return {\n        success: false,\n        error: error.message,\n        // Fallback to your actual model data\n        data: {\n          algorithms: [{\n            name: 'LightGBM',\n            accuracy: 45.68,\n            status: 'active',\n            color: '#667eea'\n          }, {\n            name: 'XGBoost',\n            accuracy: 45.61,\n            status: 'active',\n            color: '#764ba2'\n          }, {\n            name: 'CatBoost',\n            accuracy: 44.22,\n            status: 'active',\n            color: '#f093fb'\n          }],\n          trainingResults: {\n            totalModels: 30,\n            trainingTime: 21.34,\n            bestAccuracy: 45.68,\n            ensembleAccuracy: 46.12\n          }\n        }\n      };\n    }\n  }\n\n  // Predict price using the ensemble model\n  async predictPrice(productData) {\n    try {\n      const response = await apiClient.post('/predict', {\n        product_name: productData.productName,\n        category: productData.category,\n        description: productData.description,\n        brand: productData.brand,\n        features: productData.features\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error predicting price:', error);\n\n      // Fallback to mock prediction based on your actual model logic\n      const mockPrediction = this.generateMockPrediction(productData);\n      return {\n        success: false,\n        error: error.message,\n        fallbackData: mockPrediction\n      };\n    }\n  }\n\n  // Get training history and analytics\n  async getAnalytics() {\n    try {\n      const response = await apiClient.get('/analytics');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error fetching analytics:', error);\n      return {\n        success: false,\n        error: error.message,\n        data: this.getMockAnalytics()\n      };\n    }\n  }\n\n  // Get model comparison data\n  async getModelComparison() {\n    try {\n      const response = await apiClient.get('/models/comparison');\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error fetching model comparison:', error);\n      return {\n        success: false,\n        error: error.message,\n        data: this.getMockModelComparison()\n      };\n    }\n  }\n\n  // Generate realistic mock prediction based on your model results\n  generateMockPrediction(productData) {\n    const basePrice = this.calculateBasePrice(productData);\n\n    // Your actual model accuracies\n    const lightgbmVariation = 0.98 + Math.random() * 0.04; // ±2%\n    const xgboostVariation = 0.97 + Math.random() * 0.06; // ±3%\n    const catboostVariation = 0.96 + Math.random() * 0.08; // ±4%\n\n    const predictions = {\n      lightgbm: (basePrice * lightgbmVariation).toFixed(2),\n      xgboost: (basePrice * xgboostVariation).toFixed(2),\n      catboost: (basePrice * catboostVariation).toFixed(2)\n    };\n\n    // Ensemble prediction (weighted average based on your model accuracies)\n    const ensemblePrice = (parseFloat(predictions.lightgbm) * 0.45 + parseFloat(predictions.xgboost) * 0.35 + parseFloat(predictions.catboost) * 0.20).toFixed(2);\n    const confidence = 85 + Math.random() * 10; // 85-95% confidence\n\n    return {\n      ensemble: ensemblePrice,\n      algorithms: predictions,\n      confidence: confidence.toFixed(1),\n      processingTime: (Math.random() * 2 + 1).toFixed(2) + 's'\n    };\n  }\n\n  // Calculate base price using your feature engineering logic\n  calculateBasePrice(productData) {\n    var _productData$category, _productData$brand, _productData$descript, _productData$features;\n    let basePrice = 100; // Base price\n\n    // Category multipliers (based on your training data patterns)\n    const categoryMultipliers = {\n      'electronics': 1.5,\n      'gaming': 2.2,\n      'laptop': 2.8,\n      'phone': 1.9,\n      'smartphone': 1.9,\n      'headphones': 0.8,\n      'accessories': 0.7,\n      'home': 1.1,\n      'fashion': 0.9,\n      'sports': 1.0\n    };\n\n    // Brand multipliers\n    const brandMultipliers = {\n      'apple': 2.0,\n      'samsung': 1.6,\n      'google': 1.5,\n      'sony': 1.4,\n      'microsoft': 1.7,\n      'amazon': 1.2,\n      'dell': 1.3,\n      'hp': 1.2,\n      'lenovo': 1.1,\n      'generic': 0.6\n    };\n\n    // Apply category multiplier\n    const category = ((_productData$category = productData.category) === null || _productData$category === void 0 ? void 0 : _productData$category.toLowerCase()) || '';\n    const categoryMultiplier = Object.keys(categoryMultipliers).find(key => category.includes(key));\n    if (categoryMultiplier) {\n      basePrice *= categoryMultipliers[categoryMultiplier];\n    }\n\n    // Apply brand multiplier\n    const brand = ((_productData$brand = productData.brand) === null || _productData$brand === void 0 ? void 0 : _productData$brand.toLowerCase()) || '';\n    const brandMultiplier = Object.keys(brandMultipliers).find(key => brand.includes(key));\n    if (brandMultiplier) {\n      basePrice *= brandMultipliers[brandMultiplier];\n    }\n\n    // Feature-based pricing\n    const description = ((_productData$descript = productData.description) === null || _productData$descript === void 0 ? void 0 : _productData$descript.toLowerCase()) || '';\n    const features = ((_productData$features = productData.features) === null || _productData$features === void 0 ? void 0 : _productData$features.toLowerCase()) || '';\n    const allText = description + ' ' + features;\n\n    // Premium keywords\n    if (allText.includes('pro') || allText.includes('premium')) basePrice *= 1.3;\n    if (allText.includes('256gb') || allText.includes('512gb')) basePrice *= 1.2;\n    if (allText.includes('1tb')) basePrice *= 1.4;\n    if (allText.includes('wireless')) basePrice *= 1.1;\n    if (allText.includes('bluetooth')) basePrice *= 1.05;\n    if (allText.includes('4k') || allText.includes('hd')) basePrice *= 1.2;\n\n    // Add some randomness to simulate real-world variation\n    basePrice *= 0.9 + Math.random() * 0.2; // ±10% variation\n\n    return Math.max(basePrice, 10); // Minimum price of $10\n  }\n\n  // Mock analytics data based on your actual results\n  getMockAnalytics() {\n    return {\n      performanceHistory: [{\n        date: '2024-01',\n        accuracy: 42.5,\n        predictions: 1200\n      }, {\n        date: '2024-02',\n        accuracy: 43.8,\n        predictions: 1450\n      }, {\n        date: '2024-03',\n        accuracy: 44.2,\n        predictions: 1680\n      }, {\n        date: '2024-04',\n        accuracy: 44.9,\n        predictions: 1920\n      }, {\n        date: '2024-05',\n        accuracy: 45.7,\n        predictions: 2100\n      }],\n      categoryDistribution: [{\n        name: 'Electronics',\n        value: 35,\n        color: '#667eea'\n      }, {\n        name: 'Gaming',\n        value: 25,\n        color: '#764ba2'\n      }, {\n        name: 'Home & Garden',\n        value: 20,\n        color: '#f093fb'\n      }, {\n        name: 'Fashion',\n        value: 12,\n        color: '#4ecdc4'\n      }, {\n        name: 'Sports',\n        value: 8,\n        color: '#45b7d1'\n      }],\n      accuracyTrends: [{\n        metric: 'SMAPE',\n        current: 54.32,\n        previous: 56.78,\n        change: -2.46\n      }, {\n        metric: 'MAE',\n        current: 125.43,\n        previous: 138.92,\n        change: -13.49\n      }, {\n        metric: 'RMSE',\n        current: 198.76,\n        previous: 215.33,\n        change: -16.57\n      }, {\n        metric: 'R²',\n        current: 0.827,\n        previous: 0.798,\n        change: 0.029\n      }]\n    };\n  }\n\n  // Mock model comparison data\n  getMockModelComparison() {\n    return {\n      algorithms: [{\n        name: 'LightGBM',\n        accuracy: 45.68,\n        trainingTime: 7.2,\n        memoryUsage: 156\n      }, {\n        name: 'XGBoost',\n        accuracy: 45.61,\n        trainingTime: 6.8,\n        memoryUsage: 189\n      }, {\n        name: 'CatBoost',\n        accuracy: 44.22,\n        trainingTime: 7.4,\n        memoryUsage: 134\n      }],\n      hyperparameters: [{\n        algorithm: 'LightGBM',\n        params: {\n          'Learning Rate': '0.044',\n          'Num Leaves': '127',\n          'Max Depth': '12',\n          'Iterations': '1440',\n          'Feature Fraction': '0.9'\n        }\n      }, {\n        algorithm: 'XGBoost',\n        params: {\n          'Learning Rate': '0.051',\n          'Max Depth': '9',\n          'Subsample': '0.84',\n          'Iterations': '1190',\n          'Colsample Bytree': '0.9'\n        }\n      }, {\n        algorithm: 'CatBoost',\n        params: {\n          'Learning Rate': '0.030',\n          'Depth': '9',\n          'L2 Leaf Reg': '3',\n          'Iterations': '1400',\n          'Random Seed': '42'\n        }\n      }]\n    };\n  }\n}\n\n// Export singleton instance\nexport const mlModelService = new MLModelService();\nexport default mlModelService;","map":{"version":3,"names":["axios","API_BASE_URL","TIMEOUT","apiClient","create","baseURL","timeout","headers","MLModelService","getModelStatus","response","get","success","data","error","console","message","algorithms","name","accuracy","status","color","trainingResults","totalModels","trainingTime","bestAccuracy","ensembleAccuracy","predictPrice","productData","post","product_name","productName","category","description","brand","features","mockPrediction","generateMockPrediction","fallbackData","getAnalytics","getMockAnalytics","getModelComparison","getMockModelComparison","basePrice","calculateBasePrice","lightgbmVariation","Math","random","xgboostVariation","catboostVariation","predictions","lightgbm","toFixed","xgboost","catboost","ensemblePrice","parseFloat","confidence","ensemble","processingTime","_productData$category","_productData$brand","_productData$descript","_productData$features","categoryMultipliers","brandMultipliers","toLowerCase","categoryMultiplier","Object","keys","find","key","includes","brandMultiplier","allText","max","performanceHistory","date","categoryDistribution","value","accuracyTrends","metric","current","previous","change","memoryUsage","hyperparameters","algorithm","params","mlModelService"],"sources":["C:/Users/aayus/OneDrive/Desktop/AMAZON/react-ml-app/src/services/mlModelService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API configuration\r\nconst API_BASE_URL = 'http://localhost:5000/api'; // Python Flask backend\r\nconst TIMEOUT = 30000; // 30 seconds timeout for ML predictions\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: TIMEOUT,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// ML Model Service\r\nclass MLModelService {\r\n  // Get model status and information\r\n  async getModelStatus() {\r\n    try {\r\n      const response = await apiClient.get('/models/status');\r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching model status:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        // Fallback to your actual model data\r\n        data: {\r\n          algorithms: [\r\n            { name: 'LightGBM', accuracy: 45.68, status: 'active', color: '#667eea' },\r\n            { name: 'XGBoost', accuracy: 45.61, status: 'active', color: '#764ba2' },\r\n            { name: 'CatBoost', accuracy: 44.22, status: 'active', color: '#f093fb' },\r\n          ],\r\n          trainingResults: {\r\n            totalModels: 30,\r\n            trainingTime: 21.34,\r\n            bestAccuracy: 45.68,\r\n            ensembleAccuracy: 46.12,\r\n          },\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  // Predict price using the ensemble model\r\n  async predictPrice(productData) {\r\n    try {\r\n      const response = await apiClient.post('/predict', {\r\n        product_name: productData.productName,\r\n        category: productData.category,\r\n        description: productData.description,\r\n        brand: productData.brand,\r\n        features: productData.features,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error predicting price:', error);\r\n      \r\n      // Fallback to mock prediction based on your actual model logic\r\n      const mockPrediction = this.generateMockPrediction(productData);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        fallbackData: mockPrediction,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get training history and analytics\r\n  async getAnalytics() {\r\n    try {\r\n      const response = await apiClient.get('/analytics');\r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching analytics:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        data: this.getMockAnalytics(),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get model comparison data\r\n  async getModelComparison() {\r\n    try {\r\n      const response = await apiClient.get('/models/comparison');\r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching model comparison:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        data: this.getMockModelComparison(),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Generate realistic mock prediction based on your model results\r\n  generateMockPrediction(productData) {\r\n    const basePrice = this.calculateBasePrice(productData);\r\n    \r\n    // Your actual model accuracies\r\n    const lightgbmVariation = 0.98 + (Math.random() * 0.04); // ±2%\r\n    const xgboostVariation = 0.97 + (Math.random() * 0.06); // ±3%\r\n    const catboostVariation = 0.96 + (Math.random() * 0.08); // ±4%\r\n    \r\n    const predictions = {\r\n      lightgbm: (basePrice * lightgbmVariation).toFixed(2),\r\n      xgboost: (basePrice * xgboostVariation).toFixed(2),\r\n      catboost: (basePrice * catboostVariation).toFixed(2),\r\n    };\r\n\r\n    // Ensemble prediction (weighted average based on your model accuracies)\r\n    const ensemblePrice = (\r\n      (parseFloat(predictions.lightgbm) * 0.45) +\r\n      (parseFloat(predictions.xgboost) * 0.35) +\r\n      (parseFloat(predictions.catboost) * 0.20)\r\n    ).toFixed(2);\r\n\r\n    const confidence = 85 + (Math.random() * 10); // 85-95% confidence\r\n\r\n    return {\r\n      ensemble: ensemblePrice,\r\n      algorithms: predictions,\r\n      confidence: confidence.toFixed(1),\r\n      processingTime: (Math.random() * 2 + 1).toFixed(2) + 's',\r\n    };\r\n  }\r\n\r\n  // Calculate base price using your feature engineering logic\r\n  calculateBasePrice(productData) {\r\n    let basePrice = 100; // Base price\r\n    \r\n    // Category multipliers (based on your training data patterns)\r\n    const categoryMultipliers = {\r\n      'electronics': 1.5,\r\n      'gaming': 2.2,\r\n      'laptop': 2.8,\r\n      'phone': 1.9,\r\n      'smartphone': 1.9,\r\n      'headphones': 0.8,\r\n      'accessories': 0.7,\r\n      'home': 1.1,\r\n      'fashion': 0.9,\r\n      'sports': 1.0,\r\n    };\r\n\r\n    // Brand multipliers\r\n    const brandMultipliers = {\r\n      'apple': 2.0,\r\n      'samsung': 1.6,\r\n      'google': 1.5,\r\n      'sony': 1.4,\r\n      'microsoft': 1.7,\r\n      'amazon': 1.2,\r\n      'dell': 1.3,\r\n      'hp': 1.2,\r\n      'lenovo': 1.1,\r\n      'generic': 0.6,\r\n    };\r\n\r\n    // Apply category multiplier\r\n    const category = productData.category?.toLowerCase() || '';\r\n    const categoryMultiplier = Object.keys(categoryMultipliers).find(key => \r\n      category.includes(key)\r\n    );\r\n    if (categoryMultiplier) {\r\n      basePrice *= categoryMultipliers[categoryMultiplier];\r\n    }\r\n\r\n    // Apply brand multiplier\r\n    const brand = productData.brand?.toLowerCase() || '';\r\n    const brandMultiplier = Object.keys(brandMultipliers).find(key => \r\n      brand.includes(key)\r\n    );\r\n    if (brandMultiplier) {\r\n      basePrice *= brandMultipliers[brandMultiplier];\r\n    }\r\n\r\n    // Feature-based pricing\r\n    const description = productData.description?.toLowerCase() || '';\r\n    const features = productData.features?.toLowerCase() || '';\r\n    const allText = description + ' ' + features;\r\n\r\n    // Premium keywords\r\n    if (allText.includes('pro') || allText.includes('premium')) basePrice *= 1.3;\r\n    if (allText.includes('256gb') || allText.includes('512gb')) basePrice *= 1.2;\r\n    if (allText.includes('1tb')) basePrice *= 1.4;\r\n    if (allText.includes('wireless')) basePrice *= 1.1;\r\n    if (allText.includes('bluetooth')) basePrice *= 1.05;\r\n    if (allText.includes('4k') || allText.includes('hd')) basePrice *= 1.2;\r\n\r\n    // Add some randomness to simulate real-world variation\r\n    basePrice *= (0.9 + Math.random() * 0.2); // ±10% variation\r\n\r\n    return Math.max(basePrice, 10); // Minimum price of $10\r\n  }\r\n\r\n  // Mock analytics data based on your actual results\r\n  getMockAnalytics() {\r\n    return {\r\n      performanceHistory: [\r\n        { date: '2024-01', accuracy: 42.5, predictions: 1200 },\r\n        { date: '2024-02', accuracy: 43.8, predictions: 1450 },\r\n        { date: '2024-03', accuracy: 44.2, predictions: 1680 },\r\n        { date: '2024-04', accuracy: 44.9, predictions: 1920 },\r\n        { date: '2024-05', accuracy: 45.7, predictions: 2100 },\r\n      ],\r\n      categoryDistribution: [\r\n        { name: 'Electronics', value: 35, color: '#667eea' },\r\n        { name: 'Gaming', value: 25, color: '#764ba2' },\r\n        { name: 'Home & Garden', value: 20, color: '#f093fb' },\r\n        { name: 'Fashion', value: 12, color: '#4ecdc4' },\r\n        { name: 'Sports', value: 8, color: '#45b7d1' },\r\n      ],\r\n      accuracyTrends: [\r\n        { metric: 'SMAPE', current: 54.32, previous: 56.78, change: -2.46 },\r\n        { metric: 'MAE', current: 125.43, previous: 138.92, change: -13.49 },\r\n        { metric: 'RMSE', current: 198.76, previous: 215.33, change: -16.57 },\r\n        { metric: 'R²', current: 0.827, previous: 0.798, change: 0.029 },\r\n      ],\r\n    };\r\n  }\r\n\r\n  // Mock model comparison data\r\n  getMockModelComparison() {\r\n    return {\r\n      algorithms: [\r\n        { name: 'LightGBM', accuracy: 45.68, trainingTime: 7.2, memoryUsage: 156 },\r\n        { name: 'XGBoost', accuracy: 45.61, trainingTime: 6.8, memoryUsage: 189 },\r\n        { name: 'CatBoost', accuracy: 44.22, trainingTime: 7.4, memoryUsage: 134 },\r\n      ],\r\n      hyperparameters: [\r\n        {\r\n          algorithm: 'LightGBM',\r\n          params: {\r\n            'Learning Rate': '0.044',\r\n            'Num Leaves': '127',\r\n            'Max Depth': '12',\r\n            'Iterations': '1440',\r\n            'Feature Fraction': '0.9',\r\n          }\r\n        },\r\n        {\r\n          algorithm: 'XGBoost',\r\n          params: {\r\n            'Learning Rate': '0.051',\r\n            'Max Depth': '9',\r\n            'Subsample': '0.84',\r\n            'Iterations': '1190',\r\n            'Colsample Bytree': '0.9',\r\n          }\r\n        },\r\n        {\r\n          algorithm: 'CatBoost',\r\n          params: {\r\n            'Learning Rate': '0.030',\r\n            'Depth': '9',\r\n            'L2 Leaf Reg': '3',\r\n            'Iterations': '1400',\r\n            'Random Seed': '42',\r\n          }\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const mlModelService = new MLModelService();\r\nexport default mlModelService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}